"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.shallow = shallow;
exports.merge = merge;
exports.deep = deep;

var _lodash = _interopRequireDefault(require("lodash.mergewith"));

var _lodash2 = _interopRequireDefault(require("lodash.clonedeep"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * If both `defaults` and `value` are objects, they will be shallow merged. Mutations to the returned object won't have an effect over `defaults`.
 */
function shallow(defaults, value) {
  return typeof value === 'object' && value !== null && !Array.isArray(value) && typeof defaults === 'object' && defaults !== null && !Array.isArray(defaults) ? Object.assign((0, _lodash2.default)(defaults), value) : value;
}
/**
 * If both `defaults` and `value` are objects, they will be deep merged. Arrays won't be merged. Mutations to the returned object won't have an effect over `defaults`.
 */


function merge(defaults, value) {
  return (0, _lodash.default)({}, {
    data: defaults
  }, {
    data: value
  }, (obj, src) => Array.isArray(src) || Array.isArray(obj) ? src : undefined).data;
}
/**
 * If both the `defaults` and `value` are objects, they will be deep merged. Arrays will be concatenated. Mutations to the returned object won't have an effect over `defaults`.
 */


function deep(defaults, value) {
  return (0, _lodash.default)({}, {
    data: defaults
  }, {
    data: value
  }, (obj, src) => {
    const a = Array.isArray(obj);
    const b = Array.isArray(src);
    if (!a && !b) return;
    return a && b ? obj.concat(src) : src;
  }).data;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJzaGFsbG93IiwiZGVmYXVsdHMiLCJ2YWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsIk9iamVjdCIsImFzc2lnbiIsIm1lcmdlIiwiZGF0YSIsIm9iaiIsInNyYyIsInVuZGVmaW5lZCIsImRlZXAiLCJhIiwiYiIsImNvbmNhdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQTs7O0FBR08sU0FBU0EsT0FBVCxDQUF1QkMsUUFBdkIsRUFBb0NDLEtBQXBDLEVBQTJEO0FBQ2hFLFNBQU8sT0FBT0EsS0FBUCxLQUFpQixRQUFqQixJQUNMQSxLQUFLLEtBQUssSUFETCxJQUVMLENBQUNDLEtBQUssQ0FBQ0MsT0FBTixDQUFjRixLQUFkLENBRkksSUFHTCxPQUFPRCxRQUFQLEtBQW9CLFFBSGYsSUFJTEEsUUFBUSxLQUFLLElBSlIsSUFLTCxDQUFDRSxLQUFLLENBQUNDLE9BQU4sQ0FBY0gsUUFBZCxDQUxJLEdBTUhJLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjLHNCQUFVTCxRQUFWLENBQWQsRUFBbUNDLEtBQW5DLENBTkcsR0FPSEEsS0FQSjtBQVFEO0FBRUQ7Ozs7O0FBR08sU0FBU0ssS0FBVCxDQUFxQk4sUUFBckIsRUFBa0NDLEtBQWxDLEVBQXlEO0FBQzlELFNBQU8scUJBQ0wsRUFESyxFQUVMO0FBQUVNLElBQUFBLElBQUksRUFBRVA7QUFBUixHQUZLLEVBR0w7QUFBRU8sSUFBQUEsSUFBSSxFQUFFTjtBQUFSLEdBSEssRUFJTCxDQUFDTyxHQUFELEVBQVdDLEdBQVgsS0FDRVAsS0FBSyxDQUFDQyxPQUFOLENBQWNNLEdBQWQsS0FBc0JQLEtBQUssQ0FBQ0MsT0FBTixDQUFjSyxHQUFkLENBQXRCLEdBQTJDQyxHQUEzQyxHQUFpREMsU0FMOUMsRUFNTEgsSUFORjtBQU9EO0FBRUQ7Ozs7O0FBR08sU0FBU0ksSUFBVCxDQUFvQlgsUUFBcEIsRUFBaUNDLEtBQWpDLEVBQXdEO0FBQzdELFNBQU8scUJBQ0wsRUFESyxFQUVMO0FBQUVNLElBQUFBLElBQUksRUFBRVA7QUFBUixHQUZLLEVBR0w7QUFBRU8sSUFBQUEsSUFBSSxFQUFFTjtBQUFSLEdBSEssRUFJTCxDQUFDTyxHQUFELEVBQVdDLEdBQVgsS0FBd0I7QUFDdEIsVUFBTUcsQ0FBQyxHQUFHVixLQUFLLENBQUNDLE9BQU4sQ0FBY0ssR0FBZCxDQUFWO0FBQ0EsVUFBTUssQ0FBQyxHQUFHWCxLQUFLLENBQUNDLE9BQU4sQ0FBY00sR0FBZCxDQUFWO0FBQ0EsUUFBSSxDQUFDRyxDQUFELElBQU0sQ0FBQ0MsQ0FBWCxFQUFjO0FBQ2QsV0FBT0QsQ0FBQyxJQUFJQyxDQUFMLEdBQVNMLEdBQUcsQ0FBQ00sTUFBSixDQUFXTCxHQUFYLENBQVQsR0FBMkJBLEdBQWxDO0FBQ0QsR0FUSSxFQVVMRixJQVZGO0FBV0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbWVyZ2V3aXRoIGZyb20gJ2xvZGFzaC5tZXJnZXdpdGgnO1xuaW1wb3J0IGNsb25lZGVlcCBmcm9tICdsb2Rhc2guY2xvbmVkZWVwJztcblxuLyoqXG4gKiBJZiBib3RoIGBkZWZhdWx0c2AgYW5kIGB2YWx1ZWAgYXJlIG9iamVjdHMsIHRoZXkgd2lsbCBiZSBzaGFsbG93IG1lcmdlZC4gTXV0YXRpb25zIHRvIHRoZSByZXR1cm5lZCBvYmplY3Qgd29uJ3QgaGF2ZSBhbiBlZmZlY3Qgb3ZlciBgZGVmYXVsdHNgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvdzxULCBEPihkZWZhdWx0czogRCwgdmFsdWU6IFQpOiBUIHwgKFQgJiBEKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmXG4gICAgdmFsdWUgIT09IG51bGwgJiZcbiAgICAhQXJyYXkuaXNBcnJheSh2YWx1ZSkgJiZcbiAgICB0eXBlb2YgZGVmYXVsdHMgPT09ICdvYmplY3QnICYmXG4gICAgZGVmYXVsdHMgIT09IG51bGwgJiZcbiAgICAhQXJyYXkuaXNBcnJheShkZWZhdWx0cylcbiAgICA/IE9iamVjdC5hc3NpZ24oY2xvbmVkZWVwKGRlZmF1bHRzKSwgdmFsdWUpXG4gICAgOiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBJZiBib3RoIGBkZWZhdWx0c2AgYW5kIGB2YWx1ZWAgYXJlIG9iamVjdHMsIHRoZXkgd2lsbCBiZSBkZWVwIG1lcmdlZC4gQXJyYXlzIHdvbid0IGJlIG1lcmdlZC4gTXV0YXRpb25zIHRvIHRoZSByZXR1cm5lZCBvYmplY3Qgd29uJ3QgaGF2ZSBhbiBlZmZlY3Qgb3ZlciBgZGVmYXVsdHNgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2U8VCwgRD4oZGVmYXVsdHM6IEQsIHZhbHVlOiBUKTogVCB8IChUICYgRCkge1xuICByZXR1cm4gbWVyZ2V3aXRoKFxuICAgIHt9LFxuICAgIHsgZGF0YTogZGVmYXVsdHMgfSxcbiAgICB7IGRhdGE6IHZhbHVlIH0sXG4gICAgKG9iajogYW55LCBzcmM6IGFueSkgPT5cbiAgICAgIEFycmF5LmlzQXJyYXkoc3JjKSB8fCBBcnJheS5pc0FycmF5KG9iaikgPyBzcmMgOiB1bmRlZmluZWRcbiAgKS5kYXRhO1xufVxuXG4vKipcbiAqIElmIGJvdGggdGhlIGBkZWZhdWx0c2AgYW5kIGB2YWx1ZWAgYXJlIG9iamVjdHMsIHRoZXkgd2lsbCBiZSBkZWVwIG1lcmdlZC4gQXJyYXlzIHdpbGwgYmUgY29uY2F0ZW5hdGVkLiBNdXRhdGlvbnMgdG8gdGhlIHJldHVybmVkIG9iamVjdCB3b24ndCBoYXZlIGFuIGVmZmVjdCBvdmVyIGBkZWZhdWx0c2AuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWVwPFQsIEQ+KGRlZmF1bHRzOiBELCB2YWx1ZTogVCk6IFQgfCAoVCAmIEQpIHtcbiAgcmV0dXJuIG1lcmdld2l0aChcbiAgICB7fSxcbiAgICB7IGRhdGE6IGRlZmF1bHRzIH0sXG4gICAgeyBkYXRhOiB2YWx1ZSB9LFxuICAgIChvYmo6IGFueSwgc3JjOiBhbnkpID0+IHtcbiAgICAgIGNvbnN0IGEgPSBBcnJheS5pc0FycmF5KG9iaik7XG4gICAgICBjb25zdCBiID0gQXJyYXkuaXNBcnJheShzcmMpO1xuICAgICAgaWYgKCFhICYmICFiKSByZXR1cm47XG4gICAgICByZXR1cm4gYSAmJiBiID8gb2JqLmNvbmNhdChzcmMpIDogc3JjO1xuICAgIH1cbiAgKS5kYXRhO1xufVxuIl19